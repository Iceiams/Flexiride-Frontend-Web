import api from "../../api/axiosConfig";
import {
  Box,
  CircularProgress,
  Typography,
  Button,
  Snackbar,
  Alert, // Import Alert
} from "@mui/material";
import { DataGrid, GridToolbar } from "@mui/x-data-grid";
import { tokens } from "../../theme";
import Header from "../../components/Header";
import { useTheme } from "@mui/material";
import { useEffect, useState } from "react";
import { Tooltip } from "@mui/material";

const ListLockedUsers = () => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [drivers, setDrivers] = useState([]);
  const [openSnackbar, setOpenSnackbar] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState("");
  const [snackbarSeverity, setSnackbarSeverity] = useState("error");

  const unlockDriver = async (driverId) => {
    try {
      const response = await api.post(`/drivers/${driverId}/unlock`);
      setSnackbarMessage(response.data.message); // L·∫•y th√¥ng ƒëi·ªáp t·ª´ ph·∫£n h·ªìi API
      setSnackbarSeverity("success");
      setOpenSnackbar(true); // M·ªü Snackbar khi unlock th√†nh c√¥ng

      // C·∫≠p nh·∫≠t l·∫°i danh s√°ch t√†i x·∫ø
      const updatedDrivers = drivers.filter(
        (driver) => driver._id !== driverId
      );
      setDrivers(updatedDrivers);
    } catch (error) {
      console.error("Error unlocking driver:", error);
      if (error.response) {
        // Ki·ªÉm tra l·ªói session h·∫øt h·∫°n
        if (
          error.response.status === 401 ||
          error.response.data.message?.includes("Session expired")
        ) {
          console.log("Session expired. Please log in again.");
          setSnackbarMessage(
            "Phi√™n l√†m vi·ªác ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."
          );
        } else {
          setSnackbarMessage(
            error.response.data.message ||
              "C√≥ l·ªói x·∫£y ra khi m·ªü kh√≥a t√†i kho·∫£n."
          );
        }
      } else {
        setSnackbarMessage("C√≥ l·ªói x·∫£y ra khi m·ªü kh√≥a t√†i kho·∫£n.");
      }

      setSnackbarSeverity("error");
      setOpenSnackbar(true); // M·ªü Snackbar khi c√≥ l·ªói
    }
  };
  useEffect(() => {
    const fetchDrivers = async () => {
      try {
        const response = await api.get("/getLockedDrivers");
        const fetchedDrivers = response.data.drivers || [];

        if (fetchedDrivers.length === 0) {
          // Danh s√°ch r·ªóng, kh√¥ng ph·∫£i l·ªói
          setDrivers([]);
          setError(null);
        } else {
          // C√≥ t√†i kho·∫£n b·ªã kh√≥a
          setDrivers(fetchedDrivers);
          setError(null);
        }
      } catch (err) {
        console.error("Error fetching drivers:", err);
        setDrivers([]); // ƒê·∫£m b·∫£o kh√¥ng c√≥ d·ªØ li·ªáu hi·ªÉn th·ªã khi g·∫∑p l·ªói
        setError(
          "Kh√¥ng th·ªÉ t·∫£i danh s√°ch t√†i kho·∫£n. C√≥ th·ªÉ x·∫£y ra l·ªói h·ªá th·ªëng ho·∫∑c k·∫øt n·ªëi."
        );
      } finally {
        setLoading(false);
      }
    };

    fetchDrivers();
  }, []);

  const handleCloseSnackbar = () => {
    setOpenSnackbar(false);
  };

  if (loading) {
    return (
      <Box
        display="flex"
        justifyContent="center"
        alignItems="center"
        height="100vh"
      >
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box
        display="flex"
        justifyContent="center"
        alignItems="center"
        height="100vh"
        flexDirection="column"
      >
        <Typography variant="h4" color="textSecondary">
          <span role="img" aria-label="error">
            üö´
          </span>{" "}
          L·ªói x·∫£y ra
        </Typography>
        <Typography variant="body1" color="textSecondary" mt={2}>
          {error}
        </Typography>
      </Box>
    );
  }

  if (!error && drivers.length === 0) {
    return (
      <Box
        display="flex"
        justifyContent="center"
        alignItems="center"
        height="100vh"
        flexDirection="column"
      >
        <Typography variant="h4" color="textSecondary">
          <span role="img" aria-label="info">
            üìã
          </span>{" "}
          Kh√¥ng c√≥ t√†i kho·∫£n n√†o b·ªã kh√≥a.
        </Typography>
        <Typography variant="body1" color="textSecondary" mt={2}>
          Hi·ªán t·∫°i kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒëang b·ªã kh√≥a. B·∫°n c√≥ th·ªÉ quay l·∫°i sau.
        </Typography>
      </Box>
    );
  }

  const columns = [
    { field: "index", headerName: "STT", flex: 0.5 },
    {
      field: "fullName",
      headerName: "H·ªç v√† T√™n",
      flex: 1,
      renderCell: (params) =>
        `${params.row.personalInfo?.firstName || ""} ${
          params.row.personalInfo?.lastName || ""
        }`.trim(),
    },
    {
      field: "phoneNumber",
      headerName: "S·ªë ƒëi·ªán tho·∫°i",
      flex: 1,
      renderCell: (params) => params.row.personalInfo?.phoneNumber || "",
    },
    {
      field: "email",
      headerName: "Email",
      flex: 1,
      renderCell: (params) => params.row.personalInfo?.email || "",
    },
    {
      field: "avatar",
      headerName: "·∫¢nh ƒë·∫°i di·ªán",
      flex: 1,
      renderCell: (params) =>
        params.row.personalInfo?.avatar ? (
          <img
            src={params.row.personalInfo.avatar}
            alt="Avatar"
            style={{
              width: 55,
              height: 55,
              borderRadius: "50%",
              marginTop: "10px",
            }}
          />
        ) : (
          "No Image"
        ),
    },
    {
      field: "lockReason",
      headerName: "L√≠ do kh√≥a",
      flex: 1,
      renderCell: (params) => (
        <Tooltip title={params.row.lockReason || "Kh√¥ng c√≥ l√Ω do"}>
          <span>{params.row.lockReason || ""}</span>
        </Tooltip>
      ),
    },
    {
      field: "status",
      headerName: "Tr·∫°ng th√°i",
      flex: 1,
      renderCell: (params) => (
        <Button
          variant="contained"
          color="error"
          onClick={() => unlockDriver(params.row._id)}
        >
          M·ªü Kh√≥a
        </Button>
      ),
    },
  ];

  return (
    <Box m="20px">
      <Box
        sx={{
          backgroundColor: "#141B2D",
          borderRadius: "10px",
          padding: "20px",
          textAlign: "center",
          boxShadow: "0px 10px 20px rgba(0,0,0,0.3)",
          marginBottom: "20px",
        }}
      >
        <Typography
          variant="h4"
          sx={{
            color: "#ffffff",
            fontFamily: "'Playfair Display', sans-serif",
            fontWeight: "bold",
          }}
        >
          DANH S√ÅCH T√ÄI KHO·∫¢N B·ªä KH√ìA
        </Typography>
      </Box>
      <Box m="40px 0 0 0" height="75vh">
        <DataGrid
          rows={drivers}
          columns={columns}
          getRowId={(row) => row._id}
          components={{ Toolbar: GridToolbar }}
          rowHeight={80}
          sx={{
            "& .MuiDataGrid-columnHeaders": {
              backgroundColor: "#1F2A40", // M√†u n·ªÅn header
              color: "#4CCEAC", // M√†u ch·ªØ header
              fontSize: "14px",
            },
            "& .MuiDataGrid-columnHeader": {
              color: "#F7AB3F", // M√†u ch·ªØ cho t·ª´ng √¥ header
              fontWeight: "bold",
            },
            "& .MuiDataGrid-columnSeparator": {
              display: "none",
            },
            "& .MuiDataGrid-cell": {
              fontSize: "13px",
            },
          }}
          localeText={{
            toolbarDensity: "M·∫≠t ƒë·ªô",
            toolbarDensityLabel: "M·∫≠t ƒë·ªô",
            toolbarDensityCompact: "Nh·ªè",
            toolbarDensityStandard: "Ti√™u chu·∫©n",
            toolbarDensityComfortable: "Tho·∫£i m√°i",
            noRowsLabel: "Kh√¥ng c√≥ d·ªØ li·ªáu",
            columnMenuSortAsc: "S·∫Øp x·∫øp tƒÉng d·∫ßn",
            columnMenuSortDesc: "S·∫Øp x·∫øp gi·∫£m d·∫ßn",
            columnMenuFilter: "L·ªçc",
            columnMenuHideColumn: "·∫®n c·ªôt",
            columnMenuShowColumns: "Hi·ªÉn th·ªã c·ªôt",
            footerRowSelected: (count) => `${count} h√†ng ƒë√£ ch·ªçn`,
            footerTotalRows: "T·ªïng s·ªë h√†ng:",
            columnMenuManageColumns: "Qu·∫£n l√Ω c·ªôt",
            footerPaginationRowsPerPage: "S·ªë h√†ng m·ªói trang",
            footerPaginationRowsPerPageTooltip: "S·ªë h√†ng tr√™n m·ªói trang",
            footerPaginationOf: "c·ªßa",
            MuiTablePagination: {
              labelRowsPerPage: "S·ªë h√†ng m·ªói trang",
            },
          }}
        />
      </Box>

      {/* Snackbar for displaying messages */}
      <Snackbar
        open={openSnackbar}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbarSeverity}
          sx={{ width: "100%" }}
        >
          {snackbarMessage}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default ListLockedUsers;
